package ptr

import "time"

// generic ptr
func To[T any](v T) *T {
	return &v
}

func ToSlice[T any](v []T) []*T {
	p := make([]*T, len(v))
	for i := range v {
		p[i] = &v[i]
	}
	return p
}

func ToMap[K comparable, T any](v map[K]T) map[K]*T {
	p := make(map[K]*T, len(v))
	for k, v := range v {
		p[k] = &v
	}
	return p
}

// generic value
func Value[T any](p *T) T {
	if p != nil {
		return *p
	}
	var v T
	return v
}

func ValueSlice[T any](p []*T) []T {
	v := make([]T, len(p))
	for i := range p {
		val := p[i]
		if val != nil {
			v[i] = *val
		}
	}
	return v
}

func ValueMap[K comparable, T any](p map[K]*T) map[K]T {
	v := make(map[K]T, len(p))
	for key, val := range p {
		if val != nil {
			v[key] = *val
		}
	}
	return v
}

// type wrapper code generated by ./generated/main.go
func String(v string) *string {
	return To(v)
}
func StringSlice(v []string) []*string {
	return ToSlice(v)
}
func StringMap(v map[string]string) map[string]*string {
	return ToMap(v)
}
func StringValue(v *string) string {
	return Value(v)
}
func StringValueSlice(v []*string) []string {
	return ValueSlice(v)
}
func StringValueMap(v map[string]*string) map[string]string {
	return ValueMap(v)
}
func Byte(v byte) *byte {
	return To(v)
}
func ByteSlice(v []byte) []*byte {
	return ToSlice(v)
}
func ByteMap(v map[string]byte) map[string]*byte {
	return ToMap(v)
}
func ByteValue(v *byte) byte {
	return Value(v)
}
func ByteValueSlice(v []*byte) []byte {
	return ValueSlice(v)
}
func ByteValueMap(v map[string]*byte) map[string]byte {
	return ValueMap(v)
}
func Bool(v bool) *bool {
	return To(v)
}
func BoolSlice(v []bool) []*bool {
	return ToSlice(v)
}
func BoolMap(v map[string]bool) map[string]*bool {
	return ToMap(v)
}
func BoolValue(v *bool) bool {
	return Value(v)
}
func BoolValueSlice(v []*bool) []bool {
	return ValueSlice(v)
}
func BoolValueMap(v map[string]*bool) map[string]bool {
	return ValueMap(v)
}
func Int(v int) *int {
	return To(v)
}
func IntSlice(v []int) []*int {
	return ToSlice(v)
}
func IntMap(v map[string]int) map[string]*int {
	return ToMap(v)
}
func IntValue(v *int) int {
	return Value(v)
}
func IntValueSlice(v []*int) []int {
	return ValueSlice(v)
}
func IntValueMap(v map[string]*int) map[string]int {
	return ValueMap(v)
}
func Int8(v int8) *int8 {
	return To(v)
}
func Int8Slice(v []int8) []*int8 {
	return ToSlice(v)
}
func Int8Map(v map[string]int8) map[string]*int8 {
	return ToMap(v)
}
func Int8Value(v *int8) int8 {
	return Value(v)
}
func Int8ValueSlice(v []*int8) []int8 {
	return ValueSlice(v)
}
func Int8ValueMap(v map[string]*int8) map[string]int8 {
	return ValueMap(v)
}
func Int16(v int16) *int16 {
	return To(v)
}
func Int16Slice(v []int16) []*int16 {
	return ToSlice(v)
}
func Int16Map(v map[string]int16) map[string]*int16 {
	return ToMap(v)
}
func Int16Value(v *int16) int16 {
	return Value(v)
}
func Int16ValueSlice(v []*int16) []int16 {
	return ValueSlice(v)
}
func Int16ValueMap(v map[string]*int16) map[string]int16 {
	return ValueMap(v)
}
func Int32(v int32) *int32 {
	return To(v)
}
func Int32Slice(v []int32) []*int32 {
	return ToSlice(v)
}
func Int32Map(v map[string]int32) map[string]*int32 {
	return ToMap(v)
}
func Int32Value(v *int32) int32 {
	return Value(v)
}
func Int32ValueSlice(v []*int32) []int32 {
	return ValueSlice(v)
}
func Int32ValueMap(v map[string]*int32) map[string]int32 {
	return ValueMap(v)
}
func Int64(v int64) *int64 {
	return To(v)
}
func Int64Slice(v []int64) []*int64 {
	return ToSlice(v)
}
func Int64Map(v map[string]int64) map[string]*int64 {
	return ToMap(v)
}
func Int64Value(v *int64) int64 {
	return Value(v)
}
func Int64ValueSlice(v []*int64) []int64 {
	return ValueSlice(v)
}
func Int64ValueMap(v map[string]*int64) map[string]int64 {
	return ValueMap(v)
}
func Uint8(v uint8) *uint8 {
	return To(v)
}
func Uint8Slice(v []uint8) []*uint8 {
	return ToSlice(v)
}
func Uint8Map(v map[string]uint8) map[string]*uint8 {
	return ToMap(v)
}
func Uint8Value(v *uint8) uint8 {
	return Value(v)
}
func Uint8ValueSlice(v []*uint8) []uint8 {
	return ValueSlice(v)
}
func Uint8ValueMap(v map[string]*uint8) map[string]uint8 {
	return ValueMap(v)
}
func Uint16(v uint16) *uint16 {
	return To(v)
}
func Uint16Slice(v []uint16) []*uint16 {
	return ToSlice(v)
}
func Uint16Map(v map[string]uint16) map[string]*uint16 {
	return ToMap(v)
}
func Uint16Value(v *uint16) uint16 {
	return Value(v)
}
func Uint16ValueSlice(v []*uint16) []uint16 {
	return ValueSlice(v)
}
func Uint16ValueMap(v map[string]*uint16) map[string]uint16 {
	return ValueMap(v)
}
func Uint32(v uint32) *uint32 {
	return To(v)
}
func Uint32Slice(v []uint32) []*uint32 {
	return ToSlice(v)
}
func Uint32Map(v map[string]uint32) map[string]*uint32 {
	return ToMap(v)
}
func Uint32Value(v *uint32) uint32 {
	return Value(v)
}
func Uint32ValueSlice(v []*uint32) []uint32 {
	return ValueSlice(v)
}
func Uint32ValueMap(v map[string]*uint32) map[string]uint32 {
	return ValueMap(v)
}
func Uint64(v uint64) *uint64 {
	return To(v)
}
func Uint64Slice(v []uint64) []*uint64 {
	return ToSlice(v)
}
func Uint64Map(v map[string]uint64) map[string]*uint64 {
	return ToMap(v)
}
func Uint64Value(v *uint64) uint64 {
	return Value(v)
}
func Uint64ValueSlice(v []*uint64) []uint64 {
	return ValueSlice(v)
}
func Uint64ValueMap(v map[string]*uint64) map[string]uint64 {
	return ValueMap(v)
}
func Float32(v float32) *float32 {
	return To(v)
}
func Float32Slice(v []float32) []*float32 {
	return ToSlice(v)
}
func Float32Map(v map[string]float32) map[string]*float32 {
	return ToMap(v)
}
func Float32Value(v *float32) float32 {
	return Value(v)
}
func Float32ValueSlice(v []*float32) []float32 {
	return ValueSlice(v)
}
func Float32ValueMap(v map[string]*float32) map[string]float32 {
	return ValueMap(v)
}
func Float64(v float64) *float64 {
	return To(v)
}
func Float64Slice(v []float64) []*float64 {
	return ToSlice(v)
}
func Float64Map(v map[string]float64) map[string]*float64 {
	return ToMap(v)
}
func Float64Value(v *float64) float64 {
	return Value(v)
}
func Float64ValueSlice(v []*float64) []float64 {
	return ValueSlice(v)
}
func Float64ValueMap(v map[string]*float64) map[string]float64 {
	return ValueMap(v)
}
func Time(v time.Time) *time.Time {
	return To(v)
}
func TimeSlice(v []time.Time) []*time.Time {
	return ToSlice(v)
}
func TimeMap(v map[string]time.Time) map[string]*time.Time {
	return ToMap(v)
}
func TimeValue(v *time.Time) time.Time {
	return Value(v)
}
func TimeValueSlice(v []*time.Time) []time.Time {
	return ValueSlice(v)
}
func TimeValueMap(v map[string]*time.Time) map[string]time.Time {
	return ValueMap(v)
}
